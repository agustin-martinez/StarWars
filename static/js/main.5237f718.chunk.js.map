{"version":3,"sources":["assets/logo.png","components/Start.jsx","components/Header.jsx","components/Persons.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","className","class","Header","setScreenFromHeader","onClick","src","logo","alt","Persons","App","useState","currentScreen","setCurrentScreen","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5237f718.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.408244bd.png\";","import React from \"react\";\nimport \"../App.css\";\n\nconst Start = () => (\n  <div className=\"start-box\">\n    <section class=\"star-wars\">\n      <div class=\"crawl\">\n        <div class=\"title\">\n          <p>Episode REACT.JS</p>\n          <h1>A New Hope</h1>\n        </div>\n        <p>Search for persons or planets from the Star-Wars universe!</p>\n        <p>\n          Add them to your favouritelist or create your own favourite planets\n          and characters.\n        </p>\n      </div>\n    </section>\n  </div>\n);\n\nexport default Start;\n","import React from \"react\";\nimport logo from \"../../src/assets/logo.png\";\nimport \"../App.css\";\n\nconst Header = ({ setScreenFromHeader }) => {\n  return (\n    <div className=\"header-box\">\n      <div className=\"logo-box\">\n        <img\n          className=\"logo-pic\"\n          onClick={() => setScreenFromHeader(\"Start\")}\n          src={logo}\n          alt=\"StarWars\"\n        ></img>\n      </div>\n      <div className=\"line-header-bottom\"></div>\n      <div className=\"start-btm-box\">\n        <button\n          className=\"btm-persons\"\n          onClick={() => setScreenFromHeader(\"Persons\")}\n        >\n          PERSONS\n        </button>\n        <button className=\"btm-planets\">PLANETS</button>\n        <li className=\"dropdown\">\n          <button className=\"btm-favourites\">FAVOURITES</button>\n          <div className=\"dropdown-content\">\n            <div onClick={() => setScreenFromHeader(\"Favourites-Persons\")}>\n              Persons\n            </div>\n            <div onClick={() => setScreenFromHeader(\"Favourites-Planets\")}>\n              Planets\n            </div>\n            <div onClick={() => setScreenFromHeader(\"All-Favorites\")}>\n              All favourites\n            </div>\n          </div>\n        </li>\n      </div>\n      <div className=\"line-header-bottom\"></div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst Persons = () => (\n  <div className=\"persons-box\">\n    <div className=\"card-raid\">\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n      <section class=\"card-box\">\n        <div class=\"card-text\">\n          <div class=\"card-title\">\n            <h3>Luke Skywalker</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Homeworld:</span> Tatooine\n            </p>\n            <p>\n              <span>Birth date:</span> 19BBY\n            </p>\n          </div>\n        </div>\n        <button className=\"card-btm\">Add to favourites</button>\n      </section>\n    </div>\n  </div>\n);\n\nexport default Persons;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Start from \"./components/Start\";\nimport Header from \"./components/Header\";\nimport Persons from \"./components/Persons\";\nimport Planets from \"./components/Planets\";\nimport Favourites from \"./components/Favourites\";\n\nfunction App() {\n  const START = \"Start\",\n    HEADER = \"Header\",\n    PERSONS = \"Persons\",\n    PLANETS = \"Planets\",\n    FAVOURITES = \"Favourites\";\n\n  const [currentScreen, setCurrentScreen] = useState(START);\n\n  let content = null;\n  switch (currentScreen) {\n    case START:\n      content = <Start />;\n      break;\n    case HEADER:\n      content = <Header />;\n      break;\n    case PERSONS:\n      content = <Persons />;\n      break;\n    case PLANETS:\n      content = <Header />;\n      break;\n    case FAVOURITES:\n      content = <Persons />;\n      break;\n    default:\n      content = <Start />;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Header setScreenFromHeader={setCurrentScreen} />\n      </header>\n      <main>{content}</main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}