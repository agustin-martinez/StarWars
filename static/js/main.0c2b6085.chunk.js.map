{"version":3,"sources":["components/Start.jsx","components/Header.jsx","components/Persons.jsx","components/Planets.jsx","components/FavPersons.jsx","components/FavPlanets.jsx","components/AllFavourites.jsx","App.js","serviceWorker.js","index.js","assets/logo.png"],"names":["Start","className","class","Header","setScreenFromHeader","onClick","src","logo","alt","Persons","props","useState","filter","setFilter","listWithPersons","items","item","name","toLowerCase","includes","gender","birth_year","map","person","id","key","addToFavourites","addFavourite","toFavourite","type","placeholder","onKeyUp","event","target","value","Planets","listWithplanets","diameter","population","planet","FavPersons","FavPlanets","AllFavourites","setName","setGender","setBirthYear","newItem","favouritesList","content","concat","favourites","length","onChange","e","charAt","toUpperCase","slice","App","currentScreen","setCurrentScreen","setFavourites","persons","setPersons","planets","setPlanets","useEffect","listPersons","getData","url","fetch","then","res","json","response","a","next","results","forEach","push","listPlanets","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0c2b6085.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nconst Start = () => (\n  <div className=\"start-box\">\n    <section class=\"star-wars\">\n      <div class=\"crawl\">\n        <div class=\"title\">\n          <p>Episode REACT.JS</p>\n          <h1>A New Hope</h1>\n        </div>\n        <p>Search for persons or planets from the Star-Wars universe!</p>\n        <p>\n          Add them to your favouritelist or create your own favourite planets\n          and characters.\n        </p>\n      </div>\n    </section>\n  </div>\n);\n\nexport default Start;\n","import React from \"react\";\nimport logo from \"../../src/assets/logo.png\";\nimport \"../App.css\";\n\nconst Header = ({ setScreenFromHeader }) => {\n  return (\n    <div className=\"header-box\">\n      <div className=\"logo-box\">\n        <img\n          className=\"logo-pic\"\n          onClick={() => setScreenFromHeader(\"Start\")}\n          src={logo}\n          alt=\"StarWars\"\n        ></img>\n      </div>\n      <div className=\"line-header-top\"></div>\n      <div className=\"start-btm-box\">\n        <button\n          className=\"btm-persons\"\n          onClick={() => setScreenFromHeader(\"Persons\")}\n        >\n          PERSONS\n        </button>\n        <button\n          className=\"btm-planets\"\n          onClick={() => setScreenFromHeader(\"Planets\")}\n        >\n          PLANETS\n        </button>\n        <li className=\"dropdown\">\n          <button className=\"btm-favourites\">FAVOURITES</button>\n          <div className=\"dropdown-content\">\n            <div onClick={() => setScreenFromHeader(\"FavPersons\")}>Persons</div>\n            <div onClick={() => setScreenFromHeader(\"FavPlanets\")}>Planets</div>\n            <div onClick={() => setScreenFromHeader(\"AllFavourites\")}>\n              All favourites\n            </div>\n          </div>\n        </li>\n      </div>\n      <div className=\"line-header-bottom\"></div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\n\nconst Persons = (props) => {\n  const [filter, setFilter] = useState(\"\");\n  function toSearch(event) {\n    setFilter(event.target.value);\n  }\n\n  const toFavourite = (person) => {\n    let addToFavourites = {\n      name: person.name,\n      gender: person.gender,\n      birth_year: person.birth_year,\n    };\n\n    props.addFavourite(addToFavourites);\n  };\n\n  let listWithPersons = props.items\n    .filter((item) => {\n      return (\n        item.name.toLowerCase().includes(filter.toLowerCase()) ||\n        item.gender.toLowerCase().includes(filter.toLowerCase()) ||\n        item.birth_year.toLowerCase().includes(filter.toLowerCase())\n      );\n    })\n    .map((person, id) => (\n      <div key={id} className=\"card-box\">\n        <div class=\"card-text\">\n          <div className=\"card-title\">\n            <h3>{person.name}</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Gender: </span>\n              {person.gender}\n            </p>\n            <p>\n              <span>Birth date: </span>\n              {person.birth_year}\n            </p>\n          </div>\n          <button className=\"card-btm\" onClick={() => toFavourite(person)}>\n            Add to favourites\n          </button>\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"App\">\n      <div className=\"persons-box\">\n        <input\n          className=\"input-search\"\n          type=\"text\"\n          placeholder=\"Search\"\n          onKeyUp={toSearch}\n        />\n        <div className=\"card-raid\">{listWithPersons}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Persons;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\n\nconst Planets = (props) => {\n  const [filter, setFilter] = useState(\"\");\n  function toSearch(event) {\n    setFilter(event.target.value);\n  }\n\n  const toFavourite = (planet) => {\n    let addToFavourites = {\n      name: planet.name,\n      diameter: planet.diameter,\n      population: planet.population,\n    };\n\n    props.addFavourite(addToFavourites);\n  };\n\n  let listWithplanets = props.items\n    .filter((item) => {\n      return (\n        item.name.toLowerCase().includes(filter.toLowerCase()) ||\n        item.diameter.toLowerCase().includes(filter.toLowerCase()) ||\n        item.population.toLowerCase().includes(filter.toLowerCase())\n      );\n    })\n    .map((planet, id) => (\n      <div key={id} className=\"card-box\">\n        <div class=\"card-text\">\n          <div className=\"card-title\">\n            <h3>{planet.name}</h3>\n          </div>\n          <div className=\"card-info\">\n            <p>\n              <span>Diameter: </span>\n              {planet.diameter}\n            </p>\n            <p>\n              <span>Population: </span>\n              {planet.population}\n            </p>\n          </div>\n          <button className=\"card-btm\" onClick={() => toFavourite(planet)}>\n            Add to favourites\n          </button>\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"App\">\n      <div className=\"planets-box\">\n        <input\n          className=\"input-search\"\n          type=\"text\"\n          placeholder=\"Search\"\n          onKeyUp={toSearch}\n        />\n        <div className=\"card-raid\">{listWithplanets}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Planets;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst FavPersons = () => (\n  <div className=\"persons-box\">\n    <div className=\"card-raid\">\n      <div className=\"no-favourites\">Under construction</div>\n    </div>\n  </div>\n);\n\nexport default FavPersons;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst FavPlanets = () => (\n  <div className=\"persons-box\">\n    <div className=\"card-raid\">\n      <div className=\"no-favourites\">Under construction</div>\n    </div>\n  </div>\n);\n\nexport default FavPlanets;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\n\nconst AllFavourites = (props) => {\n  const [name, setName] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [birth_year, setBirthYear] = useState(\"\");\n\n  const toAdd = () => {\n    props.addFavourite(newItem);\n  };\n\n  let newItem = {\n    name: name,\n    gender: gender,\n    birth_year: birth_year,\n  };\n\n  const [filter, setFilter] = useState(\"\");\n  function toSearch(event) {\n    setFilter(event.target.value);\n  }\n\n  let favouritesList = [];\n  favouritesList = favouritesList.concat(props.favourites);\n\n  let content = null;\n  if (favouritesList.length < 1) {\n    content = <h3 className=\"no-favourites\">No favourites</h3>;\n  } else {\n    content = favouritesList\n      .filter((item) => {\n        return item.name.toLowerCase().includes(filter.toLowerCase());\n      })\n      .map((item, id) => (\n        <div key={id} className=\"card-box\">\n          <div class=\"card-text\">\n            <div className=\"card-title\">\n              <h3>{item.name}</h3>\n            </div>\n            <div className=\"card-info\">\n              <div>\n                <span>Gender: </span>\n                {item.gender}\n              </div>\n              <div>\n                <span>Birth date: </span>\n                {item.birth_year}\n              </div>\n            </div>\n          </div>\n        </div>\n      ));\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"persons-box\">\n        <div className=\"duplo\">\n          {\" \"}\n          <input\n            className=\"input-search-add\"\n            type=\"text\"\n            placeholder=\"Search\"\n            onKeyUp={toSearch}\n          />\n          <div className=\"card-box-add\">\n            <div class=\"card-text-add\">\n              <input\n                className=\"card-title-add\"\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) =>\n                  setName(\n                    e.target.value.charAt(0).toUpperCase() +\n                      e.target.value.slice(1)\n                  )\n                }\n                onClick={() => setName(\"\")}\n              />\n              <div className=\"card-info-add\">\n                <input\n                  className=\"card-info-add-1\"\n                  type=\"text\"\n                  placeholder=\"Birth\"\n                  value={birth_year}\n                  onChange={(e) =>\n                    setBirthYear(\n                      e.target.value.charAt(0).toUpperCase() +\n                        e.target.value.slice(1)\n                    )\n                  }\n                  onClick={() => setBirthYear(\"\")}\n                />\n                <input\n                  className=\"card-info-add-2\"\n                  type=\"text\"\n                  placeholder=\"Gender\"\n                  value={gender}\n                  onChange={(e) =>\n                    setGender(\n                      e.target.value.charAt(0).toUpperCase() +\n                        e.target.value.slice(1)\n                    )\n                  }\n                  onClick={() => setGender(\"\")}\n                />\n\n                <button className=\"card-btm-add\" onClick={toAdd}>\n                  Add character\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-raid-add\">{content}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default AllFavourites;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Start from \"./components/Start\";\nimport Header from \"./components/Header\";\nimport Persons from \"./components/Persons\";\nimport Planets from \"./components/Planets\";\nimport FavPersons from \"./components/FavPersons\";\nimport FavPlanets from \"./components/FavPlanets\";\nimport AllFavourites from \"./components/AllFavourites.jsx\";\n\nfunction App() {\n  const START = \"Start\",\n    HEADER = \"Header\",\n    PERSONS = \"Persons\",\n    PLANETS = \"Planets\",\n    FAV_PERSONS = \"FavPersons\",\n    FAV_PLANETS = \"FavPlanets\",\n    ALL_FAVOURITES = \"AllFavourites\";\n\n  const [currentScreen, setCurrentScreen] = useState(START);\n  const [favourites, setFavourites] = useState([]);\n  const [persons, setPersons] = useState([]);\n  const [planets, setPlanets] = useState([]);\n\n  const addFavourite = (items) => {\n    setFavourites([...favourites, items]);\n  };\n\n  let content = null;\n  switch (currentScreen) {\n    case START:\n      content = <Start />;\n      break;\n    case HEADER:\n      content = <Header />;\n      break;\n    case PERSONS:\n      content = (\n        <Persons\n          items={persons}\n          setPersons={setPersons}\n          addFavourite={addFavourite}\n        />\n      );\n      break;\n    case PLANETS:\n      content = (\n        <Planets\n          items={planets}\n          setPlanets={setPlanets}\n          addFavourite={addFavourite}\n        />\n      );\n      break;\n    case FAV_PERSONS:\n      content = <FavPersons />;\n      break;\n    case FAV_PLANETS:\n      content = <FavPlanets />;\n      break;\n    case ALL_FAVOURITES:\n      content = (\n        <AllFavourites\n          favourites={favourites}\n          setFavourites={setFavourites}\n          addFavourite={addFavourite}\n        />\n      );\n      break;\n    default:\n      content = <Start />;\n  }\n\n  useEffect(() => {\n    let listPersons = [];\n    function getData(url) {\n      fetch(url)\n        .then((res) => res.json())\n        .then(async (response) => {\n          let next = response.next;\n          if (next !== null) {\n            await getData(next);\n            response.results.forEach((persons) => listPersons.push(persons));\n          } else {\n            setPersons(listPersons);\n          }\n        });\n    }\n    getData(\"https://swapi.dev/api/people/\");\n  }, []);\n\n  useEffect(() => {\n    let listPlanets = [];\n    function getData(url) {\n      fetch(url)\n        .then((res) => res.json())\n        .then(async (response) => {\n          let next = response.next;\n          if (next !== null) {\n            await getData(next);\n            response.results.forEach((planets) => listPlanets.push(planets));\n          } else {\n            setPlanets(listPlanets);\n          }\n        });\n    }\n    getData(\"https://swapi.dev/api/planets\");\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Header setScreenFromHeader={setCurrentScreen} />\n      </header>\n      <main>{content}</main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.408244bd.png\";"],"sourceRoot":""}